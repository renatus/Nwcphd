<?php

/**
 * @file
 * A block module that displays queries, which will list current page among it's
 * results; and other pages from those lists of results as well.
 */

/**
 * Implements hook_block_info().
 */
function custom_recommend_block_info() {
  $blocks['custom_recommend_pages'] = array(
    // The name that will appear in the Block list.
    'info' => t('Custom recommend Pages'),
    // Default caching setting.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

/**
 * Custom content function. 
 * 
 * Retrieve nodes from database, sorted by creation date.
 * 
 * @return 
 *   A filtered set of the nodes.
 */
function custom_recommend_retrieve_nodes(){ 
  $max_nodes_num = variable_get('custom_recommend_nodes_max', 5);
  
  // Database API to retrieve nodes is being used.
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title', 'created', 'type'))
    ->condition('status', 1) //Only published nodes should be listed.
    ->condition('type', 'object')
    ->orderBy('created', 'DESC') //Most recent ones go first.
    ->range(0, $max_nodes_num) //LIMIT to 5 records
    ->execute(); 
  return $query;  
}

/**
 * Implements hook_block_view().
 * 
 * Add content to the block.
 */
function custom_recommend_block_view($delta = '') {
  switch ($delta) {
    case 'custom_recommend_pages':
      $block['subject'] = t('Recommended stories');
      // Check if user is allowed to see a node to prevent data disclosure.
      if (user_access('access content')) {
        // Retrieve nodes from the DB.
        $result = custom_recommend_retrieve_nodes();
        // Array to contain items for the block to render.
        $items = array();
        // Iterate over the results and format every item as link.
        foreach ($result as $node) {
          $items[] = array(
            'data' => l($node->title, 'node/' . $node->nid),
          ); 
        }
        // If there were no content related to the current node.
        if (empty($items)) {
          $block['content'] = t('Err, we have no stories like this. Yet.');  
        } 
        else {
          // Pass data through theme function to theme it by our site's theme.
          $block['content'] = theme('item_list', array(
            'items' => $items));
        }
      }
    return $block;
  }
  
}

/**
 * Implements hook_menu().
 * 
 * Create page for module settings input form.
 */
function custom_recommend_menu() {
  $items = array();

  // Create module's settings page.
  // Do not use t() for 'title' and 'description', it'll be translatable anyway.
  // 'access arguments' will limit config page visibility to those with admin
  // permissions.
  $items['admin/config/content/custom_recommend'] = array(
    'title' => 'Custom recommend',
    'description' => 'Configuration for Custom recommend module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_recommend_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  // Create page to collect clicks stats.
  // MENU_CALLBACK simply register a path so that the correct function is fired
  // when the URL is accessed.
  $items['custom_recommend_get_click_data'] = array(
    'title' => 'Click data collection',
    'description' => 'Configuration for Custom recommend module',
    'page callback' => 'custom_recommend_count_clicks',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Page callback: Custom recommend settings
 *
 * @see custom_recommend_menu()
 */
function custom_recommend_form($form, &$form_state) {
  $form['custom_recommend_nodes_max'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of nodes to display in block'),
    '#default_value' => variable_get('custom_recommend_nodes_max', 5),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t('Maximum number of links to display in our block.'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Function to count clicks at Search results page.
 * 
 * You should ping it like that:
 * http://www.nwcphd.co.uk/custom_recommend_get_click_data?page_name=Waller%20Street%20Baths
 */
function custom_recommend_count_clicks() {
  $page_name = $_GET["page_name"];
  $page_id = custom_recommend_retrieve_node_by_title($page_name);
  //drupal_set_message($page_name . " page was requested 1 more time. It's ID is " . $page_id);
  
  
  
  // Database API to retrieve nodes is being used.
  $query = db_select('custom_recommend_sprspages', 'en')
    ->fields('en', array('entityid', 'click_num'))
    ->condition('entityid', $page_id) //Filter by node title.
    ->range(0, 1) //LIMIT to 1 record
    ->execute();
  
  $click_num = 0;
  foreach ($query as $entry) {
    $click_num = $entry->click_num;
  } 
  
  drupal_set_message($click_num);
  
  if ($click_num != 0) {
    // Entry exists
    db_update('custom_recommend_sprspages')
    ->fields(array(
      'entityid' => $page_id,
      'click_num' => $click_num + 1,
    ))
    ->condition('entityid', $page_id)
    ->execute();
  } else {
    // Entry is not exist
    db_insert('custom_recommend_sprspages')
    ->fields(array(
      'entityid' => $page_id,
      'click_num' => $click_num + 1,
    ))
    ->execute();
  }
}

/**
 * Custom content function. 
 * 
 * Retrieve node by it's title from database.
 * 
 * @return 
 *   NID of a first node with provided title.
 */
function custom_recommend_retrieve_node_by_title($node_title){ 
  
  // Database API to retrieve nodes is being used.
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title')) 
    ->condition('title', $node_title) //Filter by node title.
    ->range(0, 1) //LIMIT to 1 record
    ->execute();
  
  foreach ($query as $node) {
    return $node->nid;
  } 
}
