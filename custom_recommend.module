<?php

/**
 * @file
 * A block module that displays queries, which will list current page among it's
 * results; and other pages from those lists of results as well.
 */

/**
 * Implements hook_block_info().
 */
function custom_recommend_block_info() {
  $blocks['custom_recommend_links'] = array(
    // The name that will appear in the Block list.
    'info' => t('Custom recommend links'),
    // Default caching setting.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 * 
 * Add content to the block.
 */
function custom_recommend_block_view($delta = '') {
  switch ($delta) {
    case 'custom_recommend_links':
      $block['subject'] = t('Related Links');
      // Check if user is allowed to see a node to prevent data disclosure.
      if (user_access('access content')) {    
        $cur_node = menu_get_object(); 
        $queries_list = array();
        if (isset($cur_node->nid)) {
          $cur_nid = $cur_node->nid;
          
          // Retrieve nodes from the DB.
          $result = custom_recommend_retrieve_nodes($cur_nid);
          // Array to contain items for the block to render.
          $items = array();
          // Iterate over the results and format every item as link.
          foreach ($result as $node) {
            $items[] = array(
              'data' => l($node->title, 'node/' . $node->nid),
            );
          }
        
          $queries_filtered = custom_recommend_retrieve_queries($cur_nid);
          
          // Iterate over the results and format every item as link.
          foreach ($queries_filtered as $entry) {
            $query_url = $GLOBALS['base_url'] . "/" . variable_get('custom_recommend_sprs_url', 'SPRS/SPRS.htm') . "?" . $entry->{'query_relative_url'};
            $queries_list[] = array(
              'data' => '<a href="' . $query_url . '">' . $entry->{'query_text'} . '</a>',
            );
          }
        }

        
        
        if (empty($queries_list)) {
          $queries_element = t('Err, that page was not shown in the search results. Yet.');
        } else {
          // Pass data through theme function to theme it by our site's theme.
          $queries_element = theme('item_list', array(
          'items' => $queries_list));
        }
        
        
        // If there were no content related to the current node.
        if (empty($items)) {
          $pages_element = t('Err, we have no stories like this. Yet.');  
        } else {
          // Pass data through theme function to theme it by our site's theme.
          $pages_element = theme('item_list', array(
          'items' => $items));
        }
        
        
        //$block['content'] = t('<p>Related Stories</p>') . $pages_element . t('<hr/><p>Related Queries</p>') . $queries_element;
        $block['content'] = t('<p>Related Queries</p>') . $queries_element . '<hr/>' . t('<p>Related Stories</p>') . $pages_element;
        
      }
    return $block;
  }
  
}

/**
 * Implements hook_menu().
 * 
 * Create page for module settings input form.
 */
function custom_recommend_menu() {
  $items = array();

  // Create module's settings page.
  // Do not use t() for 'title' and 'description', it'll be translatable anyway.
  // 'access arguments' will limit config page visibility to those with admin
  // permissions.
  $items['admin/config/content/custom_recommend'] = array(
    'title' => 'Custom recommend',
    'description' => 'Configuration for Custom recommend module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_recommend_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  // Create page to collect clicks stats.
  // MENU_CALLBACK simply register a path so that the correct function is fired
  // when the URL is accessed.
  $items['custom_recommend_get_frontend_data'] = array(
    'title' => 'Frontend data collection',
    'description' => 'Get data about SPRS queries and link clicks',
    'page callback' => 'custom_recommend_process_frontend_data',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Page callback: Custom recommend settings
 *
 * @see custom_recommend_menu()
 */
function custom_recommend_form($form, &$form_state) {
  $form['custom_recommend_nodes_max'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of nodes to display in block'),
    '#default_value' => variable_get('custom_recommend_nodes_max', 5),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t("Maximum number of links to site's pages to display in our block."),
    '#required' => TRUE,
  );
  
  $form['custom_recommend_queries_max'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of queries to display in block'),
    '#default_value' => variable_get('custom_recommend_queries_max', 5),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t('Maximum number of links to queries to display in our block.'),
    '#required' => TRUE,
  );
  
    $form['custom_recommend_sprs_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Relative SPRS page URL'),
    '#default_value' => variable_get('custom_recommend_sprs_url', 'SPRS/SPRS.htm'),
    '#size' => 100,
    '#maxlength' => 1000,
    '#description' => t('Something like SPRS/SPRS.htm. Note, that you have to use the same domain both for your Drupal installation, and for SPRS page'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Custom content function. 
 * 
 * Retrieve nodes from database, sorted by creation date.
 * 
 * @return 
 *   A filtered set of the nodes.
 */
function custom_recommend_retrieve_nodes($cur_nid){ 
  $max_nodes_num = variable_get('custom_recommend_nodes_max', 5);
  //drupal_set_message($cur_nid);
  
  
  
  $query = db_select('custom_recommend_sprsquery_results', 'res');
  $query->join('custom_recommend_sprsqueries', 'que', 'que.id = res.queryid');
  $query->rightJoin('custom_recommend_sprsquery_results', 'res2', 'que.id = res2.queryid');
  $query->leftJoin('custom_recommend_sprspages', 'clicks', 'clicks.entityid = res2.entityid');
  $query->leftJoin('node', 'n', 'n.nid = res2.entityid');
  
  $query
    //->fields('res', array('queryid', 'entityid'), 'que', array('id'))
    ->fields('n', array('nid', 'title'))
    ->condition('res.entityid', $cur_nid) 
    ->condition('res2.entityid', $cur_nid, '<>')
    ->orderBy('clicks.click_num', 'DESC') //Most popular ones go first.
    ->range(0, $max_nodes_num);
  
  $result = $query->execute();
  
  return $result;
  // Iterate over the results and format every item as link.
  //foreach ($result2 as $entry) {
    //drupal_set_message(var_dump($entry));
  //  drupal_set_message($entry->{'title'});
  //} 
}



function custom_recommend_retrieve_queries($cur_nid){ 
  $max_queries_num = variable_get('custom_recommend_queries_max', 5);
 
  
  // Database API to retrieve nodes is being used.
  $query = db_select('custom_recommend_sprsquery_results', 'res');
  $query->leftJoin('custom_recommend_sprsqueries', 'que', 'que.id = res.queryid');
  
  // 
  $query
    ->fields('que', array('id', 'query_text', 'query_relative_url', 'click_num'), 'res', array('queryid', 'entityid'))
    ->condition('res.entityid', $cur_nid) //Only published nodes should be listed. 
    ->orderBy('que.click_num', 'DESC') //Most popular ones go first.
    ->range(0, $max_queries_num); //LIMIT to given number of records.

   $result= $query->execute();  
  
  return $result;  
}

/**
 * Function to count clicks at Search results page.
 * 
 * You should ping it like that:
 * http://www.nwcphd.co.uk/custom_recommend_get_click_data?page_name=Waller%20Street%20Baths
 * http://www.nwcphd.co.uk/individual/private-william-street
 */
function custom_recommend_process_frontend_data() {
  //$_POST["query_type"]
  $query_type = filter_input(INPUT_POST, "query_type", FILTER_SANITIZE_STRING);
  if ($query_type == 'link_click') {
    $node_name = filter_input(INPUT_POST, "page_name", FILTER_SANITIZE_STRING);
    $node_nid = custom_recommend_retrieve_node_by_title($node_name);
    custom_recommend_add_click($node_nid);
  } elseif  ($query_type == 'query_result') {
    $query_text = filter_input(INPUT_POST, "query_text", FILTER_SANITIZE_STRING);
    //http://www.nwcphd.co.uk/SPRS/SPRS.htm?endpoint=http%3A//www.nwcphd.co.uk/sparql&query=%5BVId%5DReturn%28Det%28An%285%2CModif%28Select%2CUnordered%29%2CClass%28%22http%3A//rdfs.org/sioc/ns%23Item%22%29%29%2CNone%29%29
    $query_url = filter_input(INPUT_POST, "query_url", FILTER_SANITIZE_URL);
    //$query_rel_url[1] will contain something like:
    //endpoint=http%3A//www.nwcphd.co.uk/sparql&query=%5BVId%5DReturn%28Det%28An%285
    $query_rel_url = explode("?", $query_url, 2);
    
    $query = db_select('custom_recommend_sprsqueries', 'en')
    ->fields('en', array('id', 'query_text', 'query_relative_url', 'click_num'))
    ->condition('query_text', $query_text) //Filter by node title.
    ->range(0, 1) //LIMIT to 1 record
    ->execute();
    
    $query_id = 0;
    foreach ($query as $entry) {
      // Entry exists
      $query_id = $entry->id;
      $click_num = $entry->click_num;
      
      db_update('custom_recommend_sprsqueries')
      ->fields(array(
        'click_num' => $click_num + 1,
      ))
      ->condition('id', $query_id)
      ->execute();
    }
    
    if($query_id == 0) {
      // Entry is not exist
      $query_id = db_insert('custom_recommend_sprsqueries')
      ->fields(array(
        'query_text' => $query_text,
        'query_relative_url' => $query_rel_url[1],
        'click_num' => 1,
      ))
      ->execute();
      //drupal_set_message($query_id);
    }
    
    //Query results processing
    $results_obj = filter_input(INPUT_POST, "results_obj", FILTER_SANITIZE_URL);
    $results_arr = json_decode($results_obj, true);
    //drupal_set_message($results_obj_arr[0]['pageName']);
    foreach ($results_arr as &$value) {
      $result_url = $value['pageURL'];
      //$result_dru_alias[3] will contain something like:
      //event/wedding-elsie-annie-reid-and-gunner-james-arthur-bint
      $result_dru_alias = explode("/", $result_url, 4);
      //Will return something like node/12
      $result_dru_url = drupal_lookup_path("source", $result_dru_alias[3]);
      //$result_nid[1] will contain something like: 12
      $result_nid = explode("/", $result_dru_url);
      drupal_set_message($result_nid[1]);
      
      custom_recommend_add_query_page_link($query_id, $result_nid[1]);
    }
    
  }
}

/**
 * Custom content function. 
 * 
 * Retrieve single node by it's title from database.
 * 
 * @return 
 *   NID of a first node with provided title.
 */
function custom_recommend_retrieve_node_by_title($node_title){ 
  
  // Database API to retrieve nodes is being used.
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title')) 
    ->condition('title', $node_title) //Filter by node title.
    ->range(0, 1) //LIMIT to 1 record
    ->execute();
  
  foreach ($query as $node) {
    return $node->nid;
  } 
}

/**
 * Implements hook_node_view().
 * 
 * Collect link click numbers by tracking node views.
 * We should only count those page views, that came from SPRS page.
 */
function custom_recommend_node_view($node, $view_mode) {
  if ($node->type=="object" || $node->type=="individual" || $node->type=="article" || $node->type=="event"){
    if ($view_mode == 'full'){
      $sprs_url = $GLOBALS['base_url'] . '/' . variable_get('custom_recommend_sprs_url', 'SPRS/SPRS.htm');
      //drupal_set_message($sprs_url);
      if ($_SERVER['HTTP_REFERER'] == $sprs_url) {
        custom_recommend_add_click($node->nid);
      }
    }
    return $node;
  }    
}

function custom_recommend_add_click($node_nid) {
  // Database API to retrieve nodes is being used.
  $query = db_select('custom_recommend_sprspages', 'en')
    ->fields('en', array('entityid', 'click_num'))
    ->condition('entityid', $node_nid) //Filter by node title.
    ->range(0, 1) //LIMIT to 1 record
    ->execute();
  
  $click_num = 0;
  foreach ($query as $entry) {
    $click_num = $entry->click_num;
  } 
  
  //drupal_set_message($click_num);
  
  if ($click_num != 0) {
    // Entry exists
    db_update('custom_recommend_sprspages')
    ->fields(array(
      'entityid' => $node_nid,
      'click_num' => $click_num + 1,
    ))
    ->condition('entityid', $node_nid)
    ->execute();
  } else {
    // Entry is not exist
    db_insert('custom_recommend_sprspages')
    ->fields(array(
      'entityid' => $node_nid,
      'click_num' => $click_num + 1,
    ))
    ->execute();
  }
}

function custom_recommend_add_query_page_link($query_id, $node_nid) {
  $query = db_select('custom_recommend_sprsquery_results', 'en')
    ->fields('en', array('queryid', 'entityid'))
    ->condition('queryid', $query_id)
    ->condition('entityid', $node_nid) //Filter by node NID.
    ->range(0, 1) //LIMIT to 1 record
    ->execute();
  
  $entry_exists = 0;
  foreach ($query as $entry) {
    $entry_exists = 1;
  }
  
  if ($entry_exists == 0) {
    // Entry is not exist
    db_insert('custom_recommend_sprsquery_results')
    ->fields(array(
      'queryid' => $query_id,
      'entityid' => $node_nid,
    ))
    ->execute();
  }
}
